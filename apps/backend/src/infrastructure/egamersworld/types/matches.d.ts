// Generated by https://quicktype.io

export interface Matches {
    finishedMatches: FinishedMatch[];
    jsonBreadcrumb:  JSONBreadcrumb[];
    liveEvents:      LiveEvent[];
    recentCount:     number;
    recentMatches:   RecentMatch[];
    recentTips:      RecentTip[];
    seo:             SEO;
    upcomingEvents:  UpcomingEvent[];
}

export interface FinishedMatch {
    _id:                    string;
    teams:                  any[];
    tip_id:                 any[];
    game_slug:              GameSlug;
    status:                 FinishedMatchStatus;
    start_date:             string;
    home_team_odd:          number;
    away_team_odd:          number;
    home_team_id:           string;
    home_team_name:         string;
    home_team_country_code: string;
    home_team_logo:         string;
    away_team_id:           string;
    away_team_name:         string;
    away_team_country_code: string;
    away_team_logo:         string;
    home_team_score:        string;
    away_team_score:        string;
    home_win:               string;
    match_draw:             string;
    isIndividual:           boolean;
    tournament_id:          string;
    tournament:             string;
    best_type:              BestType;
    slug:                   string;
    createdAt:              string;
    image:                  string;
    forfeit?:               boolean;
    is_live?:               boolean;
    is_pubg?:               boolean;
    match_of_the_day?:      boolean;
    no_time?:               boolean;
    redirect?:              boolean;
    title?:                 string;
    winrate?:               Winrate;
    tournament_logo:        string;
    tournament_nlt:         boolean;
    comments:               number;
    hero?:                  Hero[];
}

export enum BestType {
    BestOf1 = "Best of 1",
    BestOf2 = "Best of 2",
    BestOf3 = "Best of 3",
    BestOf5 = "Best of 5",
}

export enum GameSlug {
    Callofduty = "callofduty",
    Counterstrike = "counterstrike",
    Dota2 = "dota2",
    Lol = "lol",
    Overwatch = "overwatch",
    Rainbowsix = "rainbowsix",
    Rocketleague = "rocketleague",
    Valorant = "valorant",
    Wildrift = "wildrift",
}

export interface Hero {
    away_team:   Team;
    home_team:   Team;
    map:         number;
    winrate_tip: null;
    date:        string;
}

export interface Team {
    score:   number;
    picks:   Ban[];
    bans:    Ban[];
    players: Player[];
}

export interface Ban {
    hero_id: number;
}

export interface Player {
    steam_id:     number;
    hero_id:      number;
    player:       string;
    matchCount:   number;
    winCount:     number;
    kills:        number;
    death:        number;
    gold:         number;
    net_worth:    number;
    assists:      number;
    gold_per_min: number;
    xp_per_min:   number;
    last_hits:    number;
    denies:       number;
    item0:        number;
    item1:        number;
    item2:        number;
    item3:        number;
    item4:        number;
    item5:        number;
}

export enum FinishedMatchStatus {
    Finished = "finished",
}

export interface Winrate {
    home_team: number;
    away_team: number;
}

export interface JSONBreadcrumb {
    link:  string;
    ankor: string;
}

export interface LiveEvent {
    _id:         string;
    tags:        LiveEventTag[];
    title:       string;
    game:        GameSlug;
    start_date:  string;
    finish_date: string;
    short_name:  string;
    parent_id:   null | string;
    slug:        string;
    prize:       string;
    image:       string;
    is_live:     boolean;
}

export interface LiveEventTag {
    _id:         string;
    title:       JSONContent;
    slug:        string;
    no_relate:   boolean;
    parent_id:   ParentID;
    year_filter: boolean;
}

export enum ParentID {
    The5E3316E216B4De7E12401Cfa = "5e3316e216b4de7e12401cfa",
    The5E3316F416B4De7E12401Cfb = "5e3316f416b4de7e12401cfb",
    The5E3A75E8D029D79A19Ca56A9 = "5e3a75e8d029d79a19ca56a9",
}

export interface JSONContent {
    en_GB: string;
    ru:    Ru;
    de?:   De;
    pt?:   Pt;
    es?:   Es;
    pl?:   Pl;
    fr?:   string;
    tr?:   Tr;
    fi?:   Fi;
    da?:   Da;
    no?:   Da;
    sv?:   Sv;
    ph?:   Da;
}

export enum Da {
    Empty = "",
    Major = "Major",
}

export enum De {
    DerInternationale = "Der internationale",
    ESLProLeague = "ESL Pro League",
    Empty = "",
    Esl = "ESL",
    ExplosionPremier = "Explosion Premier",
    Iem = "IEM",
    Majors = "Majors",
    Randalieren = "Randalieren",
}

export enum Es {
    Empty = "",
    Mayor = "Mayor",
}

export enum Fi {
    Empty = "",
    Suuri = "Suuri",
}

export enum Pl {
    Empty = "",
    Poważny = "Poważny",
}

export enum Pt {
    BlastPremier = "Blast Premier",
    ESLProLeague = "ESL Pro League",
    Empty = "",
    Esl = "ESL",
    Iem = "IEM",
    Majors = "majors",
    OInternacional = "O Internacional",
    Tumulto = "Tumulto",
}

export enum Ru {
    Blast = "BLAST",
    Cblol = "CBLOL",
    DPC = "DPC",
    Empty = "",
    Lcs = "LCS",
    Lec = "LEC",
    Lpl = "LPL",
}

export enum Sv {
    Empty = "",
    Större = "Större",
}

export enum Tr {
    Empty = "",
    Majör = "Majör",
}

export interface RecentMatch {
    _id:                    string;
    teams:                  any[];
    liveScores:             LiveScore[];
    tip_id?:                any[];
    game_slug:              GameSlug;
    status:                 RecentMatchStatus;
    start_date:             string;
    home_team_odd:          number | string;
    away_team_odd:          number | string;
    home_team_id:           string;
    home_team_name:         string;
    home_team_country_code: string;
    home_team_logo:         string;
    away_team_id:           string;
    away_team_name:         string;
    away_team_country_code: string;
    away_team_logo:         string;
    home_team_score:        string;
    away_team_score:        string;
    home_win:               string;
    match_draw:             string;
    isIndividual?:          boolean;
    tournament_id:          string;
    tournament:             string;
    best_type:              BestType;
    slug:                   string;
    createdAt:              string;
    image:                  string;
    is_live?:               boolean;
    live_scores?:           LiveScores;
    tournament_logo:        string;
    tournament_nlt:         boolean;
    comments:               number;
    isLive?:                boolean;
    picksCount:             number;
    match_of_the_day?:      boolean;
    winrate?:               Winrate;
    forfeit?:               boolean;
    is_pubg?:               boolean;
    no_time?:               boolean;
    redirect?:              boolean;
    title?:                 string;
    views?:                 number;
    tip?:                   RecentMatchTip;
}

export interface LiveScore {
    map:       string;
    homeScore: number;
    awayScore: number;
    homeSide?: Side;
    awaySide?: Side;
    round?:    number;
}

export enum Side {
    CT = "CT",
    Terrorist = "TERRORIST",
}

export interface LiveScores {
    "5f5f3023fc87df74a744205b"?: The56_D0502Bc1Bea57C30484Bca[];
    "61eeaaa195ceab652a4bf93c"?: The56_D0502Bc1Bea57C30484Bca[];
    "61407cd98ab3e0297086d57b"?: The56_D0502Bc1Bea57C30484Bca[];
    "603b5a292c19ee50bf8eb50b"?: The56_D0502Bc1Bea57C30484Bca[];
    "61914d010dc60a35414aec00"?: The56_D0502Bc1Bea57C30484Bca[];
    "5a8b2ff2cedc21a546dfeb20"?: The56_D0502Bc1Bea57C30484Bca[];
    "61f79e587844956c378421da"?: The56_D0502Bc1Bea57C30484Bca[];
    "60b2642d80d434783531968e"?: The56_D0502Bc1Bea57C30484Bca[];
    "6412d096f3cc8c7120067c10"?: The5_D73C897B543Cd56096D5F5E[];
    "6412cfbff3cc8c7120067c0f"?: The5_D73C897B543Cd56096D5F5E[];
    "61bb1d32208213468e3c91ac"?: The56_D0502Bc1Bea57C30484Bca[];
    "619899594f0cf43605d779f4"?: The56_D0502Bc1Bea57C30484Bca[];
    "5d73c897b543cd56096d5f5e"?: The5_D73C897B543Cd56096D5F5E[];
    "613a73a62c23cb20d1bfb0f9"?: The5_D73C897B543Cd56096D5F5E[];
    "61e68127c2f0213ed517ac29"?: The5_D73C897B543Cd56096D5F5E[];
    "62b99334f1a3a53c4e859239"?: The5_D73C897B543Cd56096D5F5E[];
    "5cb241e0d85d6d6a53dc6163"?: The56_D0502Bc1Bea57C30484Bca[];
    "62dee54458cec305835dd63f"?: The56_D0502Bc1Bea57C30484Bca[];
    "56d0502bc1bea57c30484bca"?: The56_D0502Bc1Bea57C30484Bca[];
    "58a52d23899cc18324028bef"?: The56_D0502Bc1Bea57C30484Bca[];
    "6405a94b4a4e2d1b20841b4c"?: The5_D73C897B543Cd56096D5F5E[];
    "63c010f83463424cab236c12"?: The5_D73C897B543Cd56096D5F5E[];
}

export interface The56_D0502Bc1Bea57C30484Bca {
    map?:  string;
    value: number;
    type:  Type;
    name?: string;
    side?: Side;
}

export enum Type {
    Map = "map",
    Total = "total",
}

export interface The5_D73C897B543Cd56096D5F5E {
    value: number;
    type:  Type;
}

export enum RecentMatchStatus {
    Upcoming = "upcoming",
}

export interface RecentMatchTip {
    announce:    string;
    autor:       Autor;
    winner:      string;
    winner_type: null;
    photo:       Photo;
}

export enum Autor {
    Auroralance = "auroralance",
    Perepelovsky = "perepelovsky",
}

export enum Photo {
    UploadsProfile3429ProfileimgPNG = "/uploads/profile/3429-profileimg.png",
    UploadsProfile3505ProfileimgPNG = "/uploads/profile/3505-profileimg.png",
}

export interface RecentTip {
    _id:                    string;
    game_slug:              GameSlug;
    status:                 RecentMatchStatus;
    start_date:             string;
    home_team_odd:          number;
    away_team_odd:          number;
    home_team_id:           string;
    home_team_name:         string;
    home_team_country_code: string;
    home_team_logo:         string;
    away_team_id:           string;
    away_team_name:         string;
    away_team_country_code: string;
    away_team_logo:         string;
    home_team_score:        string;
    away_team_score:        string;
    home_win:               string;
    match_draw:             string;
    tournament_id:          string;
    tournament:             string;
    best_type:              BestType;
    slug:                   string;
    match_of_the_day:       boolean;
    image:                  string;
    winrate:                Winrate;
    is_live?:               boolean;
    live_scores?:           { [key: string]: The56_D0502Bc1Bea57C30484Bca[] };
    tip:                    RecentTipTip;
    views:                  number;
    comments:               number;
    isLive?:                boolean;
    forfeit?:               boolean;
    no_time?:               boolean;
}

export interface RecentTipTip {
    announce:    string;
    photo:       Photo;
    autor:       Autor;
    userslug:    Autor;
    gm:          boolean;
    winner:      string;
    winner_type: null | string;
    slug:        string;
}

export interface SEO {
    _id:            string;
    __v:            number;
    breadcrumb:     string;
    breadcrumb2:    string;
    content:        string;
    createdAt:      string;
    description:    string;
    faq:            any[];
    h1:             string;
    is_template:    boolean;
    json_content:   JSONContent;
    lang:           string;
    linkTags:       LinkTag[];
    metaTags:       MetaTag[];
    navigation:     string;
    site:           string;
    slug:           string;
    title:          string;
    updatedAt:      string;
    image:          string;
    url:            string;
    jsonBreadcrumb: JSONBreadcrumb[];
}

export interface LinkTag {
    property:  Property;
    href:      string;
    hreflang?: string;
}

export enum Property {
    Alternate = "alternate",
    Canonical = "canonical",
}

export interface MetaTag {
    property:  string;
    content:   string;
    noEscape?: boolean;
}

export interface UpcomingEvent {
    _id:         string;
    tags:        UpcomingEventTag[];
    title:       string;
    game:        GameSlug;
    slug:        string;
    prize:       string;
    logo:        string;
    start_date:  string;
    finish_date: string;
    main_page:   boolean;
    no_date:     boolean;
    image?:      string;
}

export interface UpcomingEventTag {
    title: string;
    slug:  string;
}
